#nullable enable
using System;
using System.Collections;
using Architecture;
using UnityEngine.InputSystem;

namespace UI.PrefabCommands.Netcat
{
	public class ExploitCraftingCommand : CommandScript
	{
		private string? exploitName;
		private string? payloadName;
		private bool showExploitSelect;
		private bool showPayloadSelect;

		private void Start()
		{
			StartCoroutine(Run(showExploitSelect, showPayloadSelect));
		}

		/// <inheritdoc />
		protected override void OnMain()
		{
			showExploitSelect = !TryGetEnvironmentVariable("EXPLOIT", out exploitName);
			showPayloadSelect = !TryGetEnvironmentVariable("PAYLOAD", out payloadName);
		}

		private IEnumerator Run(bool showExploitMenu, bool showPayloadMenu)
		{
			if (showExploitMenu)
				yield return StartCoroutine(SelectExploit());

			EndProcess();
		}

		private IEnumerator SelectExploit()
		{
			var exploitSelected = false;
			var exploits = new string[] { "ritchie", "ash ketchum", "truttle1", "why the fuck am I doing this" };
			var selectedIndex = 0;
			var keyboard = Keyboard.current;
			
			bool wasUpPressed = keyboard[Key.UpArrow].IsPressed();
			bool wasDownPressed = keyboard[Key.DownArrow].IsPressed();
			bool wasEnterPressed = keyboard[Key.Enter].IsPressed();

			
			
			while (!exploitSelected)
			{
				Console.Clear();
				Console.WriteLine("Select Exploit");
				Console.WriteLine("==============");
				Console.WriteLine();

				for (var i = 0; i < exploits.Length; i++)
				{
					if (i == selectedIndex)
						Console.Write("\x1b[101m  ");
					else
						Console.Write("\x1b[0m  ");

					Console.WriteLine(exploits[i]);
				}
				Console.Write("\x1b[0m");

				bool redraw = false;
				
				while (!redraw)
				{
					bool isDownPressed = keyboard[Key.DownArrow].IsPressed();
					bool isUpPressed = keyboard[Key.UpArrow].IsPressed();
					bool isEnterPressed = keyboard[Key.Enter].IsPressed();

					if (isEnterPressed && !wasEnterPressed)
					{
						this.exploitName = exploits[selectedIndex];
						yield break;
					}
					
					if (isDownPressed && !wasDownPressed)
					{
						if (selectedIndex < exploits.Length - 1)
						{
							selectedIndex++;
							redraw = true;
						}
					}

					// starting to feel like fucking yandev with this shitty ass fucking code
					if (isUpPressed && !wasUpPressed)
					{
						if (selectedIndex > 0)
						{
							selectedIndex--;
							redraw = true;
						}
					}

					wasDownPressed = isDownPressed;
					wasUpPressed = isUpPressed;
					wasEnterPressed = isEnterPressed;
					
					yield return null;
				}
			}
		}
	}
}